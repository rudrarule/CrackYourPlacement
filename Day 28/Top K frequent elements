import java.util.HashMap;
import java.util.PriorityQueue;

public class Pair {
    int count;
    int key;
    
    Pair(int count, int key) {
        this.count = count;
        this.key = key;
    }
}

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        HashMap<Integer, Integer> hm = new HashMap<>();

        for (int i = 0; i < nums.length; i++) {
            hm.put(nums[i], hm.getOrDefault(nums[i], 0) + 1);
        }

        PriorityQueue<Pair> pq = new PriorityQueue<>((a, b) -> a.count - b.count);

        for (int key : hm.keySet()) {
            pq.add(new Pair(hm.get(key), key));
            if (pq.size() > k) {
                pq.poll(); 
            }
        }

        int[] result = new int[k];
        for (int i = 0; i < k; i++) {
            result[i] = pq.poll().key;
        }

        return result;
    }
}
