class Solution {
    public long getCount(int n) {
        long[][] dp = new long[10][n + 1];
        for (long[] row : dp) {
            Arrays.fill(row, -1);
        }

        long totalCount = 0;
        int[][] mat = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9},
            {-1, 0, -1}
        };

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 3; j++) {
                if (mat[i][j] != -1) {
                    totalCount += solve(n, i, j, dp, mat);
                }
            }
        }

        return totalCount;
    }

    public long solve(int n, int i, int j, long[][] dp, int[][] mat) {
        if (n == 1) {
            return 1;
        }

        if (dp[mat[i][j]][n] != -1) {
            return dp[mat[i][j]][n];
        }

        long a = solve(n - 1, i, j, dp, mat);
        long b = 0, c = 0, d = 0, e = 0;

        if (j - 1 >= 0 && mat[i][j - 1] != -1) {
            b = solve(n - 1, i, j - 1, dp, mat);
        }
        if (i - 1 >= 0 && mat[i - 1][j] != -1) {
            c = solve(n - 1, i - 1, j, dp, mat);
        }
        if (j + 1 < 3 && mat[i][j + 1] != -1) {
            d = solve(n - 1, i, j + 1, dp, mat);
        }
        if (i + 1 < 4 && mat[i + 1][j] != -1) {
            e = solve(n - 1, i + 1, j, dp, mat);
        }

        dp[mat[i][j]][n] = a + b + c + d + e;
        return dp[mat[i][j]][n];
    }
}
