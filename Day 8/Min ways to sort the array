class Solution {
    // Function to find the minimum number of swaps required to sort the array.
    public int minSwaps(int nums[]) {
        int N = nums.length;

        int ans = 0;
        int[] temp = Arrays.copyOfRange(nums, 0, N);

        // HashMap which stores the indexes of the input array.
        HashMap<Integer, Integer> h = new HashMap<>();

        Arrays.sort(temp);
        for (int i = 0; i < N; i++) {
            h.put(nums[i], i);
        }
        for (int i = 0; i < N; i++) {

            // This is checking whether the current element is at the right place or not.
            if (nums[i] != temp[i]) {
                ans++;
                int init = nums[i];

                // If not, swap this element with the index of the element which should come here.
                swap(nums, i, h.get(temp[i]));

                // Update the indexes in the HashMap accordingly.
                h.put(init, h.get(temp[i]));
                h.put(temp[i], i);
            }
        }
        return ans;
    }

    // Helper method to swap elements in the array.
    public void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}
